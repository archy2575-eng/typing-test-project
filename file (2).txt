<!DOCTYPE html>

<html lang="en">

<head>

    <meta charset="UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Minimalist Pro Typing Test - Final</title>

    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet">

    <link href="https://fonts.googleapis.com/css2?family=Baloo+Da+2:wght@400;500;600;700;800&display=swap" rel="stylesheet">

    <style>

        /* * CSS Styles (ROBUST & PERMANENT FIXES)

         * - CRITICAL FIX: Modal Content Visibility & Centering.

         * - CRITICAL FIX: History Table Grid Layout.

         * - All previous stable fixes are preserved.

         */

        :root {

            --bg-light: #f7f9fc; 

            --text-primary: #1e293b; 

            --text-secondary: #64748b; 

            --main-accent: #0f76e6; 

            --main-accent-hover: #0a66d1;

            --bg-dark: #111827; 

            --text-dark: #e5e7eb;

            --card-bg-light: #ffffff;

            --card-bg-dark: #1f2937;

            --correct-color: #10b981;

            --incorrect-color: #ef4444; 

            --current-word-bg: rgba(15, 118, 230, 0.15); 

            --border-color-light: #e2e8f0;

            --border-color-dark: #374151;

            --metric-bg-light: #f1f5f9; 

            --metric-bg-dark: #1d2b3b; 

            --timer-bg-light: #e0e7ff; 

            --timer-bg-dark: #2b3954; 

            --control-border: #cbd5e1; 

            --active-bg-color: var(--main-accent);

            --active-text-color: white;

            --shadow: 0 10px 30px rgba(0, 0, 0, 0.08); 

            --history-row-gap: 8px; 

            --focus-ring: 0 0 0 3px rgba(15, 118, 230, 0.4); 

            --modal-bg-light: white; 

            --modal-bg-dark: #1f2937;

            --modal-shadow: 0 15px 50px rgba(0, 0, 0, 0.3);

        }

        body {

            font-family: 'Inter', sans-serif;

            margin: 0; padding: 0; 

            background-color: var(--bg-light);

            color: var(--text-primary);

            transition: background-color 0.4s, color 0.4s;

            display: flex; flex-direction: column; align-items: center; min-height: 100vh;

        }

        .bangla-text { font-family: 'Baloo Da 2', 'Arial Unicode MS', sans-serif; }

        /* --- Dark Mode Styles --- */

        body.dark-mode { background-color: var(--bg-dark); color: var(--text-dark); }

        body.dark-mode .container { background-color: var(--card-bg-dark); box-shadow: 0 15px 45px rgba(0, 0, 0, 0.8); }

        body.dark-mode .metrics-display { background-color: var(--metric-bg-dark); }

        body.dark-mode .timer-metric { background-color: var(--timer-bg-dark); border-color: var(--border-color-dark); }

        body.dark-mode .menu-content { 

            background-color: var(--card-bg-dark); 

            border-color: var(--border-color-dark);

        }

        body.dark-mode .menu-item { 

            color: var(--text-dark); 

            border-bottom-color: var(--border-color-dark);

        }

        body.dark-mode .menu-item svg { fill: var(--text-dark); } 

        body.dark-mode .menu-item:hover { background-color: #2b3954; }

        body.dark-mode .modal-content { background-color: var(--modal-bg-dark); color: var(--text-dark); }

        body.dark-mode .history-table-container { border-color: var(--border-color-dark); }

        body.dark-mode .history-header { background-color: var(--metric-bg-dark); } /* Added for dark mode header */

        /* --- Toggle Switch Styling --- */

        .toggle-switch { position: relative; display: inline-block; width: 40px; height: 20px; }

        .toggle-switch input { opacity: 0; width: 0; height: 0; }

        .slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: var(--text-secondary); transition: .4s; border-radius: 20px; }

        .slider:before { position: absolute; content: ""; height: 16px; width: 16px; left: 2px; bottom: 2px; background-color: white; transition: .4s; border-radius: 50%; }

        input:checked + .slider { background-color: var(--main-accent); }

        input:checked + .slider:before { transform: translateX(20px); }

        

        /* --- Layout Container & Menu --- */

        .container {

            width: 100%; max-width: 850px; margin: 50px auto; 

            background-color: var(--card-bg-light); padding: 10px 30px 30px 30px; 

            border-radius: 15px; 

            box-shadow: var(--shadow);

            text-align: center; position: relative; 

            opacity: 0; transform: translateY(20px); animation: fadeIn 0.5s forwards;

        }

        @keyframes fadeIn { to { opacity: 1; transform: translateY(0); } }

        

        .hamburger-menu { 

            position: absolute; 

            top: 20px; 

            right: 20px; 

            z-index: 10000; 

        }

        .menu-content {

            display: none; 

            position: absolute; 

            right: 0; 

            top: 40px; 

            background-color: var(--card-bg-light);

            border: 1px solid var(--border-color-light); 

            border-radius: 8px; 

            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);

            min-width: 220px;

            z-index: 9999; 

            overflow: hidden; 

            transform-origin: top right;

            animation: slideIn 0.3s ease-out;

        }

        .menu-item {

            padding: 12px 15px; 

            cursor: pointer; 

            text-align: left; 

            font-size: 0.95em;

            display: flex; align-items: center; gap: 10px;

            border-bottom: 1px solid var(--border-color-light);

            transition: background-color 0.15s;

        }

        .menu-item:hover { background-color: var(--metric-bg-light); }

        .menu-item:last-child { border-bottom: none; }

        .toggle-label {

             padding: 12px 15px; width: 100%; margin: 0; 

             display: flex; justify-content: space-between; align-items: center;

        }

        /* --- Metrics Display (WPM, CPM, Timer) --- */

        .metrics-display {

            display: flex;

            justify-content: space-around; 

            align-items: center;

            background-color: var(--metric-bg-light);

            padding: 15px 0;

            border-radius: 10px;

            margin-bottom: 20px;

            width: 100%;

        }

        .metric-box, .timer-metric {

            text-align: center;

            padding: 0 15px; 

        }

        .metric-value { font-size: 2.2em; font-weight: 800; color: var(--main-accent); }

        .metric-label { font-size: 0.8em; color: var(--text-secondary); font-weight: 500; margin-top: -5px; }

        /* --- Controls Bar (Left, Center, Right) --- */

        .controls-bar {

            display: flex; 

            justify-content: space-between; 

            align-items: center; 

            width: 100%; 

            margin-bottom: 15px; 

            flex-wrap: wrap; 

        }

        .left-controls, .right-controls { flex-shrink: 0; padding: 5px 0; flex-basis: auto; display: flex; align-items: center; }

        .center-controls { flex-grow: 1; display: flex; justify-content: center; padding: 5px 0; }

        .control-group {

            display: flex;

            border: 1px solid var(--control-border); 

            border-radius: 8px;

            overflow: hidden; 

        }

        .control-group button { 

             padding: 9px 18px; 

             border: none; 

             border-right: 1px solid var(--control-border); 

             background-color: transparent;

             cursor: pointer;

             transition: background-color 0.2s, color 0.2s;

        }

        .control-group button:last-child { border-right: none; }

        .control-group button.active {

            background-color: var(--active-bg-color);

            color: var(--active-text-color);

        }

        /* --- Typing Area --- */

        .text-display-container {

            position: relative; margin-bottom: 20px; text-align: left; padding: 30px;

            border: 2px solid var(--border-color-light); border-radius: 12px; min-height: 150px;

            line-height: 1.8; font-size: 1.4em; outline: none; cursor: text; user-select: none;

            transition: border-color 0.2s, box-shadow 0.2s;

            overflow-y: hidden; word-wrap: break-word; word-break: normal;

        }

        

        /* HIDDEN INPUT: CRITICAL - MUST BE OFF-SCREEN */

        #hiddenInput {

            position: fixed; 

            left: -9999px; 

            top: 0; 

            opacity: 0;

            pointer-events: none; 

            width: 1px; 

            height: 1px; 

            overflow: hidden;

            z-index: -1; 

        }

        

        /* --- Modal Base Styles --- */

        .modal {

            display: none; 

            position: fixed; 

            z-index: 10001; 

            left: 0; top: 0;

            width: 100%; height: 100%;

            overflow: auto; 

            background-color: rgba(0,0,0,0.6); 

        }

        

        /* Modal Content Visibility & Centering */

        .modal-content {

            background-color: var(--modal-bg-light);

            margin: 10% auto; 

            padding: 30px;

            border-radius: 10px;

            border: 1px solid var(--border-color-light);

            width: 80%; 

            max-width: 700px; 

            box-shadow: var(--modal-shadow);

            position: relative; 

        }

        .close-btn {

            color: var(--text-secondary);

            float: right;

            font-size: 30px;

            font-weight: bold;

            transition: color 0.2s;

        }

        .close-btn:hover,

        .close-btn:focus {

            color: var(--incorrect-color);

            text-decoration: none;

            cursor: pointer;

        }

        /* --- History Modal (TABLE VIEW FIX) --- */

        .history-controls { 

            margin-bottom: 15px; 

            text-align: center; 

        }

        .history-controls .control-group {

            display: inline-flex;

            margin: 0 auto; 

        }

        .history-table-container {

            border: 1px solid var(--border-color-light);

            border-radius: 10px;

            overflow-x: auto; 

            min-width: 650px; 

        }

        

        /* Grid Layout for Table Structure - **CRITICAL FIX HERE** */

        .history-header, .history-list li {

            display: grid;

            /* Adjusting columns: Date/Time takes 2.5 parts, others 1 part each */

            grid-template-columns: 2.5fr 1fr 1fr 1fr 1fr; 

            gap: var(--history-row-gap);

            padding: 12px 15px; 

            font-size: 0.9em;

            text-align: center;

            border-bottom: 1px solid var(--border-color-light);

        }

        .history-header { 

            font-weight: 700; 

            background-color: var(--metric-bg-light); 

            border-bottom: 3px solid var(--main-accent);

        }

        .history-list li:last-child { border-bottom: none; }

        .history-date { text-align: left; }

        .history-date small { display: block; font-size: 0.8em; color: var(--text-secondary); margin-top: 2px;}

        /* --- About Modal (CONTROL CENTERED) --- */

        .about-controls { 

            margin-bottom: 15px; 

            text-align: center; 

        }

        .about-controls .control-group { 

            display: inline-flex; 

            margin: 0 auto; 

        }

        

        /* --- General Typing Feedback --- */

        .word-wrapper span.correct { color: var(--text-primary); }

        body.dark-mode .word-wrapper span.correct { color: var(--text-dark); }

        .word-wrapper span.incorrect { color: var(--incorrect-color); text-decoration: underline; text-decoration-color: var(--incorrect-color); }

        .word-wrapper span.incorrect.correct { color: var(--incorrect-color); text-decoration: none; }

        .word-wrapper span.extra { color: var(--incorrect-color); background-color: rgba(239, 68, 68, 0.2); }

        .word-wrapper.current-word { background-color: var(--current-word-bg); border-radius: 4px; padding: 0 2px; }

        /* Animation Pulse for stats */

        @keyframes pulse { 0% { transform: scale(1); } 50% { transform: scale(1.05); } 100% { transform: scale(1); } }

        .metric-value.update-pulse { animation: pulse 0.3s ease-out; }

        

    </style>

</head>

<body>

    <div class="container">

        

        <div class="hamburger-menu">

            <button class="hamburger-button" id="hamburgerBtn" title="Menu" style="border: none; background: none;">

                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 16 16">

                    <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z"/>

                </svg>

            </button>

            <div class="menu-content" id="menuContent">

                <div class="menu-item" style="padding: 0;">

                    <label class="toggle-label" for="modeToggleCheckbox">

                        <span id="modeLabel">💡 Light Mode</span>

                        <label class="toggle-switch">

                            <input type="checkbox" id="modeToggleCheckbox">

                            <span class="slider"></span>

                        </label>

                    </label>

                </div>

                <div class="menu-item" id="historyMenuItem">

                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM4 11a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-1zm5-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V7zm-5-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V3zm5 8a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-1z"/></svg>

                    <span>Result History</span>

                </div>

                 <div class="menu-item" id="aboutMenuItem">

                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/><path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.471-.315 1.428-1.758 2.29-2.73 2.716-.184.07-.27.27-.084.43.235.202.665.114.665-.084 0-.156-.254-.325-.19-.516.294-.658.835-1.543 1.832-1.993.308-.147.385-.417.294-.648zM7.229 4.237c.079-.194.331-.417.654-.424.185-.004.423.046.608.19.16.126.335.328.324.471-.013.197-.184.382-.38.477-.354.17-.76.155-1.076.014-.149-.06-.28-.15-.406-.279z"/></svg>

                    <span>About Us</span>

                </div>

            </div>

        </div>

        <div class="header-group">

            <h6 style="color: var(--main-accent); font-weight: 700;">TYPING SPEED TEST</h6>

            <h1 style="font-size: 2.5em; margin: 5px 0 10px 0;"><b>Elevate Your Typing Skills</b></h1>

            <h5 style="color: var(--text-secondary); margin-bottom: 25px;">Measure your speed and accuracy for free. LETS START 🚀</h5> 

        </div>

        <div class="metrics-display">

            <div class="timer-metric">

                <div class="metric-label">TIME LEFT</div>

                <div class="metric-value" id="timerDisplay">60</div>

            </div>

            <div class="metric-box">

                <div class="metric-label">WPM</div>

                <div class="metric-value" id="wpmResult">0</div>

            </div>

            <div class="metric-box">

                <div class="metric-label">CPM</div>

                <div class="metric-value" id="cpmResult">0</div>

            </div>

            <div class="metric-box">

                <div class="metric-label">ACCURACY</div>

                <div class="metric-value" id="accuracyResult">0%</div>

            </div>

        </div> 

        <div class="controls-bar">

            

            <div class="left-controls">

                <div class="control-group">

                    <button id="pauseBtn" class="active">Pause</button>

                    <button id="resumeBtn" style="display: none;">Resume</button>

                    <button id="resetBtn">Reset</button>

                </div>

            </div>

            

            <div class="center-controls">

                <div class="time-select-group">

                    <label for="timeSelect" style="color: var(--text-secondary); font-weight: 500; font-size: 0.9em;">Duration:</label>

                    <select id="timeSelect">

                        </select>

                </div>

            </div>

            

            <div class="right-controls">

                <div class="control-group">

                    <button id="langEnglish" class="active">English</button>

                    <button id="langBangla">বাংলা</button>

                </div>

            </div>

        </div> 

        <div class="text-display-container" id="textDisplay" tabindex="0">

            Click here and start typing to begin the test...

        </div>

        

        <input type="text" id="hiddenInput" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false">

    </div>

    

    <div id="historyModal" class="modal">

        <div class="modal-content">

            <span class="close-btn" id="closeModalHistory">&times;</span>

            <h2>Result History</h2>

            <div class="history-controls">

                <div class="history-filter-group control-group"> 

                    <button id="historyLangEnglishBtn" class="history-filter-active">English Results</button>

                    <button id="historyLangBanglaBtn">বাংলা Results</button>

                </div>

            </div>

            

            <div class="history-table-container">

                <ul class="history-header" style="list-style: none; margin: 0; padding: 0 15px;">

                    <span class="history-date">Date/Time</span>

                    <span class="history-time">Duration</span>

                    <span class="history-wpm">WPM</span>

                    <span class="history-cpm">CPM</span>

                    <span class="history-acc">Accuracy</span>

                </ul>

                <ul id="historyList" style="list-style: none; padding: 0; margin: 0;">

                    </ul>

            </div>

            

        </div>

    </div>

    <div id="aboutModal" class="modal">

        <div class="modal-content">

            <span class="close-btn" id="closeModalAbout">&times;</span>

            <h2>About This App</h2>

            <div class="about-controls">

                <div class="control-group">

                    <button id="aboutLangEnglishBtn" class="active">English</button>

                    <button id="aboutLangBanglaBtn">বাংলা</button>

                </div>

            </div>

            <div id="aboutContentEnglish" style="text-align: left; padding-top: 15px;" class="about-content">

                <p>This is a minimalist typing speed test application built with HTML, CSS, and vanilla JavaScript. It is designed to provide a clean, professional, and distraction-free experience for measuring your WPM, CPM, and accuracy.</p>

                <p>Features include: Dual language support (English and Bengali), Dark Mode, Result History tracking (saved locally), and multiple time duration options.</p>

                <p>Developer: AI Assistant (A product of collaborative design and development practice).</p>

            </div>

            <div id="aboutContentBangla" style="text-align: left; padding-top: 15px; display: none;" class="bangla-text about-content">

                <p>এটি একটি মিনিমালিস্টিক টাইপিং স্পিড টেস্ট অ্যাপ্লিকেশন যা HTML, CSS, এবং ভ্যানিলা জাভাস্ক্রিপ্ট ব্যবহার করে তৈরি করা হয়েছে। এটি আপনার WPM, CPM এবং অ্যাকুরেসি পরিমাপ করার জন্য একটি পরিষ্কার, পেশাদার এবং মনোযোগ-মুক্ত অভিজ্ঞতা দেওয়ার জন্য ডিজাইন করা হয়েছে।</p>

                <p>বৈশিষ্ট্যগুলির মধ্যে রয়েছে: দ্বৈত ভাষা সমর্থন (ইংরেজি এবং বাংলা), ডার্ক মোড, ফলাফল ইতিহাস ট্র্যাকিং (লোকালি সংরক্ষিত), এবং একাধিক সময়সীমার অপশন।</p>

                <p>ডেভেলপার: এআই অ্যাসিস্ট্যান্ট (সহযোগিতামূলক নকশা ও উন্নয়ন অনুশীলনের একটি পণ্য)।</p>

            </div>

        </div>

    </div>

    <script>

        /* * JAVASCRIPT LOGIC - STABLE VERSION RESTORED (Input/Focus Safety Checks Preserved) */

        

        // --- DATA AND INITIALIZATION ---

        const ENGLISH_TEXT = "The quick brown fox jumps over the lazy dog. Programming is a key skill for the future. Always be learning new things to stay ahead in life. Practice makes perfect when it comes to typing speed tests. Typing is a fundamental skill for digital communication.";

        const BANGLA_TEXT = "বাংলা টাইপিং শেখা খুবই গুরুত্বপূর্ণ। দ্রুত টাইপ করার জন্য নিয়মিত অনুশীলন করা দরকার। কম্পিউটার ও প্রযুক্তির এই যুগে বাংলা ভাষাকে এগিয়ে নিয়ে যেতে হবে। মনের ভাব প্রকাশ করার জন্য কি-বোর্ড ব্যবহার করা একটি আবশ্যক দক্ষতা। আজকের দিনে তথ্য প্রযুক্তির ব্যবহার সর্বত্রই হচ্ছে।";

        

        const TIME_OPTIONS = [15, 30, 60, 120, 300]; 

        const TIME_LABELS = ["15 Sec", "30 Sec", "1 Min", "2 Min", "5 Min"];

        const HISTORY_LIMIT = 15; 

        

        let targetText = ENGLISH_TEXT;

        let typedText = '';

        let timer = null;

        let timeLeft = 60; 

        let maxTime = 60; 

        let isTypingStarted = false;

        let isPaused = false;

        let correctChars = 0;

        let errors = 0;

        let currentWordIndex = 0;

        let currentHistoryFilter = 'English'; 

        // DOM Elements

        const textDisplay = document.getElementById('textDisplay');

        const hiddenInput = document.getElementById('hiddenInput');

        const timerDisplay = document.getElementById('timerDisplay');

        const timeSelect = document.getElementById('timeSelect');

        const modeToggleCheckbox = document.getElementById('modeToggleCheckbox');

        const modeLabel = document.getElementById('modeLabel');

        const langEnglishBtn = document.getElementById('langEnglish');

        const langBanglaBtn = document.getElementById('langBangla');

        const hamburgerBtn = document.getElementById('hamburgerBtn');

        const menuContent = document.getElementById('menuContent');

        const pauseBtn = document.getElementById('pauseBtn');

        const resumeBtn = document.getElementById('resumeBtn');

        const resetBtn = document.getElementById('resetBtn');

        const historyModal = document.getElementById('historyModal');

        const aboutModal = document.getElementById('aboutModal');

        const historyList = document.getElementById('historyList');

        const historyLangEnglishBtn = document.getElementById('historyLangEnglishBtn'); 

        const historyLangBanglaBtn = document.getElementById('historyLangBanglaBtn');   

        const aboutLangEnglishBtn = document.getElementById('aboutLangEnglishBtn');

        const aboutLangBanglaBtn = document.getElementById('aboutLangBanglaBtn');

        const wpmResult = document.getElementById('wpmResult');

        const cpmResult = document.getElementById('cpmResult');

        const accuracyResult = document.getElementById('accuracyResult');

        

        // Utility for converting time to label

        const timeLabelMap = TIME_OPTIONS.reduce((map, time, index) => {

            map[time] = TIME_LABELS[index];

            return map;

        }, {});

        // --- Core Functions ---

        function splitTextIntoWords(text) {

            return text.match(/(\S+\s*)/g) || [];

        }

        function initializeTextDisplay() {

            typedText = '';

            currentWordIndex = 0;

            correctChars = 0;

            errors = 0;

            

            textDisplay.classList.toggle('bangla-text', targetText === BANGLA_TEXT);

            textDisplay.innerHTML = '';

            const wordsWithSpaces = splitTextIntoWords(targetText);

            

            wordsWithSpaces.forEach((wordWithSpace) => {

                const wordWrapper = document.createElement('span');

                wordWrapper.className = 'word-wrapper';

                

                wordWithSpace.split('').forEach(char => {

                    const charSpan = document.createElement('span');

                    charSpan.textContent = char === ' ' ? '\u0020' : char; 

                    wordWrapper.appendChild(charSpan);

                });

                textDisplay.appendChild(wordWrapper);

            });

            

            highlightCurrentWord(0);

            hiddenInput.value = '';

            updateStats();

            

            // Ensure hidden input is focused when text is initialized

            hiddenInput.focus();

        }

        function highlightCurrentWord(index) {

             const allWords = textDisplay.querySelectorAll('.word-wrapper');

            allWords.forEach((word, idx) => {

                word.classList.remove('current-word');

                if (idx === index) {

                    word.classList.add('current-word');

                    const rect = word.getBoundingClientRect();

                    const containerRect = textDisplay.getBoundingClientRect();

                    

                    if (rect.bottom > containerRect.bottom || rect.top < containerRect.top) {

                        textDisplay.scrollTop += rect.top - containerRect.top - (containerRect.height / 3) + 10;

                    }

                }

            });

        }

        

        function startTimer() {

            if (timer) return; 

            isTypingStarted = true;

            isPaused = false;

            

            pauseBtn.style.display = 'inline-block';

            resumeBtn.style.display = 'none';

            pauseBtn.classList.add('active');

            textDisplay.classList.add('focussed');

            

            timer = setInterval(() => {

                if (isPaused) return;

                timeLeft--;

                timerDisplay.textContent = timeLeft;

                updateStats(true); 

                if (timeLeft <= 0) { endTest(); }

            }, 1000);

        }

        function endTest() {

            clearInterval(timer);

            timer = null;

            isTypingStarted = false;

            isPaused = false;

            textDisplay.classList.remove('focussed');

            

            const finalWPM = calculateWPM();

            const finalCPM = calculateCPM();

            const finalAccuracy = calculateAccuracy();

            wpmResult.textContent = finalWPM;

            cpmResult.textContent = finalCPM;

            accuracyResult.textContent = `${finalAccuracy}%`;

            const saveDate = new Date();

            saveResult({

                wpm: finalWPM, cpm: finalCPM, accuracy: finalAccuracy,

                lang: targetText === ENGLISH_TEXT ? 'English' : 'Bangla', 

                time: maxTime,

                date: saveDate.toISOString(), 

                displayDate: saveDate.toLocaleString('en-US', { 

                    year: 'numeric', month: 'short', day: 'numeric', 

                    hour: '2-digit', minute: '2-digit', hour12: true 

                }) 

            });

            

            resetTest(true); // Restore original behavior: reset and refocus

        }

        function resetTest(shouldRefocus = true) {

            clearInterval(timer);

            timer = null;

            isTypingStarted = false;

            isPaused = false;

            timeLeft = maxTime;

            typedText = '';

            correctChars = 0;

            errors = 0;

            currentWordIndex = 0;

            timerDisplay.textContent = maxTime;

            

            wpmResult.textContent = 0;

            cpmResult.textContent = 0;

            accuracyResult.textContent = '0%';

            

            pauseBtn.style.display = 'inline-block';

            resumeBtn.style.display = 'none';

            pauseBtn.classList.remove('active');

            textDisplay.classList.remove('focussed');

            

            initializeTextDisplay();

            

            if (shouldRefocus) { hiddenInput.focus(); }

        }

        function calculateCorrectWords() {

            const allTargetWords = splitTextIntoWords(targetText);

            const typedWords = typedText.split(' '); 

            let correctWordCount = 0;

            

            for(let index = 0; index < typedWords.length; index++) {

                const targetWord = allTargetWords[index] ? allTargetWords[index].trim() : '';

                const typedWord = typedWords[index] ? typedWords[index].trim() : '';

                

                const isWordSubmitted = typedText.endsWith(' ') && index < typedWords.length - 1;

                const isFinalWordSubmitted = (typedWords.length === allTargetWords.length && index === typedWords.length - 1 && typedWord === targetWord);

                

                if ((isWordSubmitted || isFinalWordSubmitted) && typedWord === targetWord) {

                    correctWordCount++;

                }

            }

            return correctWordCount;

        }

        function calculateWPM() {

            const timeElapsed = maxTime - timeLeft;

            if (!isTypingStarted || timeElapsed <= 0) return 0;

            const minutes = timeElapsed / 60; 

            const correctWordCount = calculateCorrectWords();

            return Math.max(0, Math.round(correctWordCount / minutes));

        }

        function calculateCPM() {

            const timeElapsed = maxTime - timeLeft;

            if (!isTypingStarted || timeElapsed <= 0) return 0;

            const minutes = timeElapsed / 60; 

            return Math.max(0, Math.round(correctChars / minutes)); 

        }

        function calculateAccuracy() {

            if (typedText.length === 0) return 0;

            const total = typedText.length;

            const correct = total - errors;

            return Math.max(0, Math.round((correct / total) * 100)); 

        }

        

        function handleInput() {

            // BUG FIX: Add a safeguard to prevent input handling if input is completely empty (can happen on initial load/browser quirks)

            if (hiddenInput.value === '' && typedText === '' && !isTypingStarted) return;

            if (timeLeft <= 0 || isPaused) { hiddenInput.value = typedText; return; }

            if (!isTypingStarted) { startTimer(); }

            

            let currentTyped = hiddenInput.value;

            if (currentTyped.endsWith('  ')) { currentTyped = currentTyped.slice(0, -1); hiddenInput.value = currentTyped; }

            

            typedText = currentTyped;

            

            const allTargetWords = splitTextIntoWords(targetText);

            const typedWords = typedText.split(' '); 

            

            correctChars = 0; errors = 0;

            

            currentWordIndex = typedWords.length - 1;

            if (typedText.endsWith(' ') && typedWords.length <= allTargetWords.length) { currentWordIndex = typedWords.length; } 

            else if (typedWords.length > allTargetWords.length) { currentWordIndex = allTargetWords.length - 1; }

            currentWordIndex = Math.min(Math.max(0, currentWordIndex), allTargetWords.length - 1);

            highlightCurrentWord(currentWordIndex);

            updateTypingFeedback(allTargetWords, typedWords);

            updateStats(false);

            if (typedText.length >= targetText.length && typedText.substring(0, targetText.length) === targetText) {

                 if (timer) endTest(); 

            }

        }

        

        function updateTypingFeedback(allTargetWords, typedWords) {

            const allWordWrappers = textDisplay.querySelectorAll('.word-wrapper');

            allWordWrappers.forEach((wordWrapper, wordIndex) => {

                const targetWordWithSpace = allTargetWords[wordIndex] || '';

                const typedWordWithSpace = typedWords[wordIndex] || '';

                

                wordWrapper.querySelectorAll('.extra').forEach(span => span.remove());

                wordWrapper.querySelectorAll('span').forEach(span => span.classList.remove('correct', 'incorrect'));

                

                let charSpans = wordWrapper.querySelectorAll('span'); 

                charSpans.forEach((charSpan, charIndex) => {

                    const targetChar = targetWordWithSpace[charIndex];

                    const typedChar = typedWordWithSpace[charIndex];

                    

                    if (typedChar !== undefined) {

                        if (typedChar === targetChar) {

                            charSpan.classList.add('correct');

                            correctChars++;

                        } else {

                            charSpan.classList.add('incorrect');

                            errors++;

                        }

                    } 

                });

                

                if (typedWordWithSpace.length > targetWordWithSpace.length) {

                    const extraLength = typedWordWithSpace.length - targetWordWithSpace.length;

                    

                    for (let i = 0; i < extraLength; i++) {

                        let extraSpan = document.createElement('span');

                        extraSpan.classList.add('extra');

                        const extraChar = typedWordWithSpace[targetWordWithSpace.length + i];

                        extraSpan.textContent = extraChar;

                        wordWrapper.appendChild(extraSpan);

                        errors++; 

                    }

                }

            });

        }

        

        function updateStats(shouldPulse = false) {

            const currentWPM = calculateWPM();

            const currentCPM = calculateCPM();

            const currentAccuracy = calculateAccuracy();

            if (shouldPulse) {

                [wpmResult, cpmResult, accuracyResult].forEach(el => el.classList.remove('update-pulse'));

                requestAnimationFrame(() => {

                    wpmResult.classList.add('update-pulse');

                    cpmResult.classList.add('update-pulse');

                    accuracyResult.classList.add('update-pulse');

                });

            }

            wpmResult.textContent = currentWPM;

            cpmResult.textContent = currentCPM;

            accuracyResult.textContent = `${currentAccuracy}%`;

        }

        

        

        // --- HISTORY & MODAL FUNCTIONS ---

        

        function saveResult(result) {

             let history = JSON.parse(localStorage.getItem('typingHistory')) || [];

             history.unshift(result); 

             history = history.slice(0, HISTORY_LIMIT); 

             localStorage.setItem('typingHistory', JSON.stringify(history));

        }

        function showHistory(filterLang = currentHistoryFilter) {

            currentHistoryFilter = filterLang; 

            historyLangEnglishBtn.classList.toggle('active', filterLang === 'English');

            historyLangBanglaBtn.classList.toggle('active', filterLang === 'Bangla');

            const allHistory = JSON.parse(localStorage.getItem('typingHistory')) || [];

            const filteredHistory = allHistory.filter(result => result.lang === filterLang);

            

            historyList.innerHTML = ''; 

            if (filteredHistory.length === 0) {

                const li = document.createElement('li');

                // Ensure layout still looks decent for empty message

                li.style.gridTemplateColumns = '1fr'; 

                li.style.textAlign = 'center';

                li.style.backgroundColor = 'transparent';

                li.style.borderBottom = 'none';

                li.style.padding = '20px 0';

                li.innerHTML = `No ${filterLang} results found. Start typing to save your first result.`;

                historyList.appendChild(li);

                historyModal.style.display = 'block';

                menuContent.style.display = 'none';

                return;

            }

            

            filteredHistory.forEach((result) => {

                const li = document.createElement('li');

                li.classList.add('history-item'); 

                

                const dateTimeParts = result.displayDate ? result.displayDate.split(',') : ['N/A', 'N/A']; 

                const datePart = dateTimeParts[0].trim();

                const timePart = dateTimeParts[1] ? dateTimeParts[1].trim() : '';

                li.innerHTML = `

                    <span class="history-date">${datePart}<small>${timePart}</small></span>

                    <span class="history-time">${timeLabelMap[result.time] || result.time + 's'}</span>

                    <span class="history-wpm">${result.wpm}</span>

                    <span class="history-cpm">${result.cpm}</span>

                    <span class="history-acc">${result.accuracy}%</span>

                `;

                historyList.appendChild(li);

            });

            

            historyModal.style.display = 'block';

            menuContent.style.display = 'none';

        }

        function showAbout() {

            aboutModal.style.display = 'block';

            menuContent.style.display = 'none';

            toggleAboutLanguage(aboutLangEnglishBtn.classList.contains('active') ? 'English' : 'Bangla');

        }

        function toggleAboutLanguage(lang) {

            const englishContent = document.getElementById('aboutContentEnglish');

            const banglaContent = document.getElementById('aboutContentBangla');

            

            if (lang === 'English') {

                englishContent.style.display = 'block';

                banglaContent.style.display = 'none';

                aboutLangEnglishBtn.classList.add('active');

                aboutLangBanglaBtn.classList.remove('active');

            } else {

                englishContent.style.display = 'none';

                banglaContent.style.display = 'block';

                aboutLangEnglishBtn.classList.remove('active');

                aboutLangBanglaBtn.classList.add('active');

            }

        }

        

        function changeLanguage(lang) {

            const newText = lang === 'English' ? ENGLISH_TEXT : BANGLA_TEXT;

            if (newText !== targetText) {

                targetText = newText;

                langEnglishBtn.classList.toggle('active', lang === 'English');

                langBanglaBtn.classList.toggle('active', lang === 'Bangla');

                resetTest(true);

            }

        }

        

        function toggleDarkMode() {

            const isChecked = modeToggleCheckbox.checked;

            document.body.classList.toggle('dark-mode', isChecked);

            localStorage.setItem('darkMode', isChecked);

            modeLabel.textContent = isChecked ? '🌙 Dark Mode' : '💡 Light Mode';

        }

        

        function createTimeDropdown() {

            timeSelect.innerHTML = '';

            TIME_OPTIONS.forEach((time, index) => {

                const option = document.createElement('option');

                option.value = time;

                option.textContent = TIME_LABELS[index];

                if (time === maxTime) { option.selected = true; }

                timeSelect.appendChild(option);

            });

        }

        // --- Event Listeners ---

        

        hiddenInput.addEventListener('input', handleInput);

        

        textDisplay.addEventListener('click', () => { 

            hiddenInput.focus(); 

            if (isPaused) { 

                isPaused = false; 

                startTimer(); 

                pauseBtn.style.display = 'inline-block';

                resumeBtn.style.display = 'none';

                pauseBtn.classList.add('active');

            } 

        });

        

        hiddenInput.addEventListener('focus', () => { 

            textDisplay.classList.add('focussed'); 

            if (isTypingStarted && !isPaused) {

                pauseBtn.classList.add('active');

            }

        });

        

        hiddenInput.addEventListener('blur', () => { 

            if (!isTypingStarted || timeLeft <= 0 || isPaused) { 

                textDisplay.classList.remove('focussed'); 

            } 

        });

        

        document.addEventListener('keydown', (e) => {

            const isModalOpen = historyModal.style.display === 'block' || aboutModal.style.display === 'block';

            if (isModalOpen || e.ctrlKey || e.altKey || e.metaKey) return;

            

            if (e.key.length === 1 || e.key === 'Backspace' || e.key === ' ') {

                if (document.activeElement !== hiddenInput) {

                    hiddenInput.focus();

                }

                if (!isTypingStarted && e.key.length === 1) { 

                    // Use a small timeout to let the key press register in the hidden input

                    setTimeout(() => handleInput(), 10); 

                }

            }

        });

        // Pause/Resume/Reset

        pauseBtn.addEventListener('click', () => { 

            if (!isTypingStarted || isPaused || timeLeft <= 0) return;

            isPaused = true;

            clearInterval(timer);

            timer = null;

            pauseBtn.style.display = 'none';

            resumeBtn.style.display = 'inline-block';

            pauseBtn.classList.remove('active');

            resumeBtn.classList.add('active');

            textDisplay.classList.remove('focussed');

            hiddenInput.blur();

        });

        resumeBtn.addEventListener('click', () => {

            if (!isTypingStarted || !isPaused || timeLeft <= 0) return;

            isPaused = false;

            startTimer();

            pauseBtn.style.display = 'inline-block';

            resumeBtn.style.display = 'none';

            pauseBtn.classList.add('active');

            resumeBtn.classList.remove('active');

            hiddenInput.focus();

            textDisplay.classList.add('focussed');

        });

        resetBtn.addEventListener('click', () => { 

            resetTest(true);

        }); 

        

        timeSelect.addEventListener('change', () => { maxTime = parseInt(timeSelect.value); resetTest(); });

        modeToggleCheckbox.addEventListener('change', toggleDarkMode);

        

        // Menu Toggle

        hamburgerBtn.addEventListener('click', (e) => { 

            e.stopPropagation(); 

            menuContent.style.display = menuContent.style.display === 'block' ? 'none' : 'block'; 

        });

        

        // Language Buttons

        langEnglishBtn.addEventListener('click', () => changeLanguage('English'));

        langBanglaBtn.addEventListener('click', () => changeLanguage('Bangla'));

        // Modal Controls

        document.getElementById('historyMenuItem').addEventListener('click', () => showHistory(currentHistoryFilter));

        document.getElementById('aboutMenuItem').addEventListener('click', showAbout);

        document.getElementById('closeModalHistory').addEventListener('click', () => { historyModal.style.display = 'none'; });

        document.getElementById('closeModalAbout').addEventListener('click', () => { aboutModal.style.display = 'none'; });

        

        // History Language Filter

        historyLangEnglishBtn.addEventListener('click', () => showHistory('English'));

        historyLangBanglaBtn.addEventListener('click', () => showHistory('Bangla'));

        // About Language Toggle

        aboutLangEnglishBtn.addEventListener('click', () => toggleAboutLanguage('English'));

        aboutLangBanglaBtn.addEventListener('click', () => toggleAboutLanguage('Bangla'));

        // Window Click Listener

        window.addEventListener('click', (event) => {

            if (event.target === historyModal) { historyModal.style.display = 'none'; }

            if (event.target === aboutModal) { aboutModal.style.display = 'none'; }

            

            if (event.target !== hamburgerBtn && !menuContent.contains(event.target)) {

                 menuContent.style.display = 'none';

            }

        });

        

        

        // --- INITIAL LOAD ---

        document.addEventListener('DOMContentLoaded', () => {

            const isDark = localStorage.getItem('darkMode') === 'true';

            if (isDark) { document.body.classList.add('dark-mode'); modeToggleCheckbox.checked = true; }

            toggleDarkMode();

            createTimeDropdown();

            langEnglishBtn.classList.add('active');

            aboutLangEnglishBtn.classList.add('active');

            // Call initializeTextDisplay() which ensures hiddenInput is focused and ready

            initializeTextDisplay(); 

        });

    </script>

</body>

</html>